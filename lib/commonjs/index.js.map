{"version":3,"sources":["index.tsx"],"names":["AudioRecorder","NativeModules","ScreenAudioRecorder","EventEmitter","NativeEventEmitter","eventsMap","data","init","options","start","stop","on","event","callback","nativeEvent","Error","removeAllListeners","addListener"],"mappings":";;;;;;;AAAA;;AA0CA,MAAMA,aAAa,GAAGC,2BAAcC,mBAApC;AACA,MAAMC,YAAY,GAAG,IAAIC,+BAAJ,CAAuBJ,aAAvB,CAArB;AACA,MAAMK,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAAlB;AAIA,MAAMJ,mBAA4C,GAAG;AACnDK,EAAAA,IAAI,EAAGC,OAAD,IAAsBR,aAAa,CAACO,IAAd,CAAmBC,OAAnB,CADuB;AAEnDC,EAAAA,KAAK,EAAE,MAAMT,aAAa,CAACS,KAAd,EAFsC;AAGnDC,EAAAA,IAAI,EAAE,MAAMV,aAAa,CAACU,IAAd,EAHuC;AAInDC,EAAAA,EAAE,EAAE,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACvB,UAAMC,WAAW,GAAGT,SAAS,CAACO,KAAD,CAA7B;;AAEA,QAAI,CAACE,WAAL,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;;AAEDZ,IAAAA,YAAY,CAACa,kBAAb,CAAgCF,WAAhC;AACA,WAAOX,YAAY,CAACc,WAAb,CAAyBH,WAAzB,EAAsCD,QAAtC,CAAP;AACD;AAbkD,CAArD;eAgBeX,mB","sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\n\nexport interface Options {\n  /**\n   * Sample rate in hz. Default = 44100\n   */\n  sampleRate?: number;\n  /**\n   * Channels, 1 = MONO, 2 = STEREO. Default = 1\n   * - `1 | 2`\n   */\n  channels?: number;\n  /**\n   * Bits per sample. Default = 16\n   * - `8 | 16`\n   */\n  bitsPerSample?: number;\n  /**\n   * Interval in miliseconds to receive audio base64 data to \"on\" event. Default = 0\n   */\n  audioEmitInterval?: number;\n  /**\n   * File name. Default = \"audio.wav\"\n   */\n  fileName?: string;\n  /**\n   * Record audio from microphone instead of device. Default = false\n   */\n  fromMic?: boolean;\n  /**\n   * Save recorded audio. Default = false\n   */\n  saveFile?: boolean;\n}\n\ntype ScreenAudioRecorderType = {\n  init: (options: Options) => void;\n  start: () => void;\n  stop: () => Promise<string>;\n  on: (event: 'data', callback: (data: string) => void) => void;\n};\n\nconst AudioRecorder = NativeModules.ScreenAudioRecorder;\nconst EventEmitter = new NativeEventEmitter(AudioRecorder);\nconst eventsMap = {\n  data: 'data',\n};\n\nconst ScreenAudioRecorder: ScreenAudioRecorderType = {\n  init: (options: Options) => AudioRecorder.init(options),\n  start: () => AudioRecorder.start(),\n  stop: () => AudioRecorder.stop(),\n  on: (event, callback) => {\n    const nativeEvent = eventsMap[event];\n\n    if (!nativeEvent) {\n      throw new Error('Invalid event');\n    }\n\n    EventEmitter.removeAllListeners(nativeEvent);\n    return EventEmitter.addListener(nativeEvent, callback);\n  },\n};\n\nexport default ScreenAudioRecorder;\n"]}